


 // clearMapAndRenderMarkers('openMap', lugaresXcliente[cliente]);


    // // Funci√≥n para reiniciar el mapa con nuevos marcadores
    // function resetMap(locations) {
    //     map.eachLayer(function (layer) {
    //         if (layer instanceof L.Marker) map.removeLayer(layer);
    //     });

    //     for (var i = 0; i < locations.length; i++) {
    //         var loc = locations[i];
    //         L.marker([loc['lat'], loc['lng']], {icon: redIcon}).addTo(map).bindPopup(loc['name']).openPopup();
    //     }
    // }


    // function clearMapAndRenderMarkers(mapSelector, data) {
    // // Configura el mapa, limpiando el anterior si existe
    //     var mapOption = {center: [4.682523136221837, -74.1092804182811], zoom: 12, zoomControl:true};
    //     if (typeof map != 'undefined') {
    //         map.remove();  // Elimina el mapa anterior si existe
    //     }
        
    //     // Crea un nuevo objeto mapa
    //     globalThis.map = new L.map(mapSelector, mapOption);
        
    //     var layer = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
    //         subdomains: 'abcd',
    //         maxZoom: 19,
    //         minZoom: 10
    //     });
    //     map.addLayer(layer);
    //     for (var key in data) {
    //         if (data.hasOwnProperty(key)) {
    //             var coordenadas = data[key]['coordenadas'].split(',');
    //             var lat = coordenadas[0].trim();
    //             var lng = coordenadas[1].trim();

    //             L.marker([lat, lng], {icon: redIcon})
    //                 .addTo(map)
    //                 .bindPopup("Empresa: " + data[key]['direccion'] + "<br>");
    //         }
    //     }
    // }
 





 $anunciantesProductos = DB::connection('mysql2')
            ->table('anunciantes_productos')
            ->pluck('anunciante_id','id')
            ->all();

        $data2 = DB::connection('mysql2')->table('datos')
            ->select(
                'datos.lugares_id',
                'datos.tipopautas_id',
                DB::raw("
                    GROUP_CONCAT(DISTINCT
                        CASE
                            WHEN {$unidad} = 1 THEN lugares.propietarios_id
                            ELSE datos.comercializador
                        END
                        SEPARATOR ','
                    ) as comercializadorId
                "),
                DB::raw("
                    GROUP_CONCAT(DISTINCT
                        datos.producto2
                        SEPARATOR ','
                    ) as producto2
                "),
                'datos.comercializador',
                'datos.pantallaNumero'
            )
            ->join('lugares', 'datos.lugares_id', '=', 'lugares.id')
            ->whereIn('datos.tipopublicidades_id', $tipoPublicidadesLedId)
            ->whereDate('datos.created_at', '<=', $ultimoDiaMes)
            ->whereDate('datos.created_at', '>=', $primerDiaMes);

        if($empresa!=0){
            if ($unidad == 1) {
                $data2->where('lugares.propietarios_id', $empresa);
            } else {
                $data2->where('datos.comercializador', $empresa);
            }
        }

        //$data2->where('datos.tipopautas_id', '=', 1);
        /*
        if($uso==1){
            $data2->where('datos.tipopautas_id', '=', 1);
        }
        if($uso==2){
            $data2->where('datos.tipopautas_id', '!=', 1);
        }
        */

        $data2->groupBy('lugares_id','pantallaNumero');
        $datos = $data2->get();



        $datos2 = [];
        foreach ($datos as $value) {
            $comercializadorId = $value->comercializadorId;
            $comercializadorIdsArray = explode(',', $comercializadorId);

            if (count($comercializadorIdsArray) > 1) {
                $comercializadorId = $value->comercializador;
            }

            if (!isset($datos2[$comercializadorId])) {
                $datos2[$comercializadorId] = [
                    'total' => 0,
                    'ventas' => 0
                ];
            }

            $datos2[$comercializadorId]['total']++;


            $producto2Array = explode(",", $value->producto2);

            foreach ($producto2Array as $producto2Id) {

                    if (!isset($datos2[$comercializadorId][$value->lugares_id][$value->pantallaNumero])) {
                        $datos2[$comercializadorId][$value->lugares_id][$value->pantallaNumero] = [];

                    }

                    if (!in_array($anunciantesProductos[$producto2Id], $datos2[$comercializadorId][$value->lugares_id][$value->pantallaNumero])) {
                        $datos2[$comercializadorId][$value->lugares_id][$value->pantallaNumero][] = $anunciantesProductos[$producto2Id];
                        $datos2[$comercializadorId]['ventas']++;
                    }
            }
        }

        $datos2 = collect($datos2)->sortByDesc(function($item) {
            return ($item['ventas'] * 100 / ($item['total'] * 6));
        })->all();






















<div class="row p-0 m-0" style="height: 69vh; max-height: 69vh; overflow:hidden; border:0px solid red;">
    <div class="col-9 m-0 p-0 me-3 ">
        <div class="row p-0 m-0">
            <div class="col-12 m-0 p-0 mb-2 border">
                <select class="form-control select2" id="cliente">
                    <option value="">Seleccionar Anunciante</option>
                    @foreach($anunciantes as $key => $value)
                        <option value="{{$key}}">{{$value}}</option>
                    @endforeach
                </select>
            </div>
            <div class="col-12 m-0 p-0 ">
                <div class="row p-0 m-0 ps-2 border">
                    <div class="col-12 p-0 m-0 text-danger">Producto por anunciante</div>
                    <div class="col-7 m-0 p-0 me-2" style="height:40vh;">
                        <table id="tableProducto" class="datatable2 table table-striped w-100" style="font-size: 12px;">
                            <thead>
                                <tr>
                                    <th class="border pt-0 pb-0" style="width:78%;">Productos</th>
                                    <th class="border pt-0 pb-0">Elementos</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                    <div class="col-4 m-0 p-0 ">
                        <div id="graficoProducto" style="height:30vh;"></div>
                    </div>
                </div>
            </div>
            <div class="col-12 m-0 p-0 ">
                <div class="row p-0 m-0 ps-2 border">
                    <div class="col-12 p-0 m-0 text-danger">Comercializador por anunciante</div>
                    <div class="col-7 m-0 p-0 me-2" style="height:40vh;">
                        <table id="tableComercializador" class="datatable3 table table-striped w-100" style="font-size: 12px;">
                            <thead>
                                <tr>
                                    <th class="border pt-0 pb-0" style="width:78%;">Comercializador</th>
                                    <th class="border pt-0 pb-0">Elementos</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                    <div class="col m-0 p-0">
                        <div id="graficoComercializador" style="height:30vh;"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col border container-fluid me-0 pe-0" id="openMap"></div>
</div>
<script type="text/javascript">

    var table2 = setupDataTable('datatable2');
    var table3 = setupDataTable('datatable3');

    function setupDataTable(selector) {
        var table = $('.'+ selector).DataTable({
            paging: false,
            order: [[1, 'desc']],
            dom: 'Brtp <"actions">',
            orderCellsTop: true,
            fixedHeader: true,
            scrollX: true,
            scrollY: "20vh",
            scrollCollapse: true
        });
        table.buttons().remove();
        addSearchInput(table, selector);
        return table;
    }

    function addSearchInput(table, selector) {
        $(selector + ' thead tr:eq(0) th').each(function (i) {
            $(this).append('<input type="text" placeholder="Buscar: " style="width:100%; font-size:11px; line-height:15px; border:none; border:1px solid #f2f2f2;" />');
            $('input', this).on('keyup change', function () {
                if (table.column(i).search() !== this.value) {
                    table.column(i).search(this.value).draw();
                }
            });
        });
    }

    var mapOption = {center: [4.682523136221837, -74.1092804182811], zoom: 12, zoomControl:true};
    globalThis.map = new L.map('openMap', mapOption);
    map.touchZoom.disable();
    map.doubleClickZoom.disable();
    map.boxZoom.disable();
    var layer = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {subdomains: 'abcd', maxZoom: 19, minZoom: 10});
    map.addLayer(layer);

    var redIcon = L.icon({
        iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34]
    });
    function resetMap(data) {
        map.eachLayer(function (layer) {
            if (layer instanceof L.Marker) {
                map.removeLayer(layer);
            }
        });
        for (var key in data) {
            if (data.hasOwnProperty(key)) {
                var coordenadas = data[key]['coordenadas'].split(',');
                var lat = coordenadas[0].trim();
                var lng = coordenadas[1].trim();
                
                L.marker([lat, lng], {icon: redIcon})
                    .addTo(map)
                    .bindPopup("Empresa: " + data[key]['direccion'] + "<br>");
            }
        }
    }

    
    $("#anunciante").on('change', function(){
        var anunciante = this.value;
        var anunciantes = <?php echo json_encode($anunciantes); ?>;
        var productoXanunciante = <?php echo json_encode($productosXanunciante); ?>;
        var comercializadorXanunciante = <?php echo json_encode($comercializadoresXanunciante); ?>;
        var lugarXanunciante = <?php echo json_encode($lugaresXanunciante); ?>;

        clearTableAndGraph('#tableProducto tbody', '#graficoProducto', productoXanunciante[anunciante]);
        clearTableAndGraph('#tableComercializador tbody', '#graficoComercializador', comercializadorXanunciante[anunciante]);

        resetMap(lugarXanunciante[anunciante]);
    });

    function clearTableAndGraph(tableSelector, chartSelector, data) {
        var table = $(tableSelector);
        table.empty();
        var categories = [];
        var values = [];

        for (var key in data) {
            if (data.hasOwnProperty(key)) {
                categories.push(key);
                values.push(data[key]['total']);
                var row = '<tr><td class="border pt-0 pb-0">'+key+'</td><td class="border pt-0 pb-0">'+data[key]['total']+'</td></tr>';
                table.append(row);
            }
        }

        renderChart(chartSelector, categories, values);
    }

    function renderChart(selector, categories, values) {
        Highcharts.chart(selector.substr(1), {
            chart: {type: 'column'},
            title: {text: ''},
            xAxis: {categories: categories},
            yAxis: {min: 0, title: {text: 'Total'}},
            series: [{
                name: 'Total',
                data: values
            }]
        });
    }
          
</script>












vista 



@foreach($datos2 as $key => $value)

    @if($key==2)
        {{ $value['ventas'] }}
        {{ $value['total'] }}
    @endif
@endforeach


<div class="col border ms-2  " style="height:65vh;">
<div id="ocupacion" style="width: 100%; height: 60vh;">
    
</div>
</div>
<script type="text/javascript">
var chart = new Highcharts.Chart({
    chart: {
        renderTo: 'ocupacion',
        type: 'column',
        options3d: {
            enabled: true,
            alpha: 0,
            beta: 0,
            depth: 28,
            viewDistance: 25
        }
    },
    xAxis: {
        type: 'category'
    },
    yAxis: {
        title: {
            enabled: true,
            text: 'Cantidad de pantallas'
        },
    },
    tooltip: {
        headerFormat: '<b>{point.key}</b><br>',
        pointFormat: 'Pantallas: {point.y}'
    },
    title: {
        text: 'Ocupaci√≥n por empresa propietaria de pantallas LED con pauta comercial',
        align: 'left'
    },
    legend: {
        enabled: false
    },
    plotOptions: {
        column: {
            depth: 25,
            dataLabels: {
                enabled: true,
                format: '{point.y} %' // Muestra el valor en la columna
            }
        }
    },
    credits: {
       enabled: false
    },
    series: [{
        data: [
            @foreach($datos2 as $key => $value)
                ['{{$empresas[$key]->descripcion}}', 
                @if($aplicarMultiplicacion)
                    {{ number_format(($value['ventas']*100/($value['total']*6)), 2) }}
                @else
                    {{ number_format($value['porcentaje'], 2) }},
                @endif
                ],
            @endforeach
        ],
        colorByPoint: true,
        colors: [
            @foreach($datos2 as $key => $value)
                '#{{ ($empresas[$key]->color == '' ? 'ddd' : $empresas[$key]->color) }}',
            @endforeach
        ]
    }]
});
</script>





public function rankingEmpresa($unidad, $periodo, $empresa, $uso)
    {
        list($mes, $anno) = explode("-", $periodo);
        $mes = (int)$mes;
        $anno = (int)$anno;
        $ultimoDiaMes = Carbon::create($anno, $mes)->endOfMonth()->endOfDay();
        $primerDiaMes = Carbon::create($anno, $mes)->startOfMonth();
        $tipoPublicidades = DB::connection('mysql2')->table('tipopublicidades')->where('tipolugares_id', $unidad)->get();
        $tipoPublicidades2 = $tipoPublicidades->pluck('id')->toArray();

        $data = DB::connection('mysql2')->table('datos')
            ->join('anunciantes_productos', 'datos.producto2', '=', 'anunciantes_productos.id')
            ->join('lugares', 'lugares.id', '=', 'datos.lugares_id')
            ->join('clientes', 'clientes.id', '=', 'datos.clientes_id');

        if ($unidad == 3) {
            $data->join('propietarios', 'propietarios.id', '=', 'datos.comercializador');
        } else {
            $data->join('propietarios', 'propietarios.id', '=', 'lugares.propietarios_id');
        }

        $data = $data->select(
            'propietarios.descripcion as empresa',
            'propietarios.id as empresa_id',
            DB::raw('COUNT(DISTINCT datos.clientes_id) as clientes'),
            DB::raw('COUNT(DISTINCT CASE WHEN clientes.grupo_id = 2 THEN datos.clientes_id END) as clientes_directo'),
            DB::raw('COUNT(DISTINCT CASE WHEN datos.tipopublicidades_id = 1 THEN datos.clientes_id END) as clientes_tradicional'),
            DB::raw('COUNT(DISTINCT CASE WHEN datos.tipopublicidades_id = 2 THEN datos.clientes_id END) as clientes_led'),
            DB::raw('COUNT(DISTINCT anunciantes_productos.anunciante_id) as anunciantes'),
            DB::raw('COUNT(DISTINCT CASE WHEN datos.tipopublicidades_id = 1 THEN anunciantes_productos.anunciante_id END) as anunciantes_tradicional'),
            DB::raw('COUNT(DISTINCT CASE WHEN datos.tipopublicidades_id = 2 THEN anunciantes_productos.anunciante_id END) as anunciantes_led')
        )
            ->whereIn('datos.tipopublicidades_id', $tipoPublicidades2)
            ->whereDate('datos.created_at', '<=', $ultimoDiaMes)
            ->whereDate('datos.created_at', '>=', $primerDiaMes)
            ->when($empresa != 0, function ($query) use ($empresa, $unidad) {
                if ($unidad == 1) {
                    return $query->where('lugares.propietarios_id', $empresa);
                }
                return $query->where('datos.comercializador', $empresa);
            })
            ->when($uso == 1, function ($query) {
                return $query->where('datos.tipopautas_id', '=', 1);
            })
            ->when($uso == 2, function ($query) {
                return $query->where('datos.tipopautas_id', '!=', 1);
            })
            ->groupBy('propietarios.id')
            ->get();

        return view('estudio-competencia.graficos.rankingEmpresa', compact('data'));
    }






foreach ($datos as $key => $value) {
    if ($unidad == 1) {
        $propietarioIds = $value->propietarios_id;
    } else {
        $propietarioIds = $value->comercializador2_id;
    }

    if (isset($empresas[$propietarioIds])) {

       
        $ubicacionId = $value->direccion
        $referenciaId = $value->referencia2;

        
        if (!isset($datos2[$value->id][$empresas[$propietarioIds]->descripcion])) {
            $datos2[$value->id][$empresas[$propietarioIds]->descripcion] = [
                'total' => 0,
                'color' => $empresas[$propietarioIds]->color,
                'referencias' => [],
                'ubicaciones' => [],
            ];
        }

      
        $datos2[$value->id][$empresas[$propietarioIds]->descripcion]['total']++;

      
        if (!isset($datos2[$value->id][$empresas[$propietarioIds]->descripcion]['ubicaciones'][$value->coordenadas])) {
            $datos2[$value->id][$empresas[$propietarioIds]->descripcion]['ubicaciones'][$value->coordenadas] = 1;
        }

       
        if (!isset($datos2[$value->id][$empresas[$propietarioIds]->descripcion]['referencias'][$ubicacionId][$referenciaId])) {
            $datos2[$value->id][$empresas[$propietarioIds]->descripcion]['referencias'][$ubicacionId][$referenciaId] = [
                'foto' => $value->foto2,
                'fecha' => $value->created_at,
            ];
        }
    }
}










195
clientes

 if ($empresa != 0) {
                if ($unidad == 1) {
                    $data->where('lugares.propietarios_id', $empresa);
                } else if ($unidad == 2) {
                    //validacion in_array para ver si $empresa esta presente en el arreglo X entonces usa datos.comercializ
                    if(in_array($empresa,$arrayX)){
                        $data->where('datos.comercializador2_id', $empresa);
                    }else{
                        $data->where('lugares.propietarios_id', $empresa);
                    }
                    
                } else {
                    $data->where('datos.comercializador2_id', $empresa);
                }
            }

ANUNCIANTES
34
//select traer en un array X los id de comercializador2_id para la unidad $unidad

62
if ($empresa != 0) {
            if ($unidad == 1) {
                $data2->where('lugares.propietarios_id', $empresa);
            } else if ($unidad == 2) {
                //validacion in_array para ver si $empresa esta presente en el arreglo X entonces usa datos.comercializ
                if(in_array($empresa,$arrayX)){
                    $data2->where('datos.comercializador2_id', $empresa);
                }else{
                    $data2->where('lugares.propietarios_id', $empresa);
                }
                
            } else {
                $data2->where('datos.comercializador2_id', $empresa);
            }
        }